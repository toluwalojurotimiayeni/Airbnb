# -*- coding: utf-8 -*-
"""Data Analysis of AirBnb Dataset.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1uUQ6Eqx0vifT5xcXJmxDx5iqqEfZO0G2

<center><h1>Capstone Project Creation</h1></center>
<center><h3>IBM SkillsBuild Europe Delivery - Data Analytics</h3></center>


# Pre-requisite

* Understanding of Python, Power BI or Tableau
* Understanding of Data Cleaning
* Understanding Data Visualization

### Data Analytics of Airbnb Data:

#### Objective:

In this exericise, you will be performing Data Analytics on an Open Dataset dataset coming from Airbnb. Some of the tasks include
- Data Cleaning.
- Data Transformation
- Data Visualization.

#### Overview of Airbnb Data:

People's main criteria when visiting new places are reasonable accommodation and food. Airbnb (Air-Bed-Breakfast) is an online marketplace created to meet this need of people by renting out their homes for a short term. They offer this facility at a relatively lower price than hotels. Further people worldwide prefer the homely and economical service offered by them. They offer services across various geographical locations

#### Dataset Source

YOu can get the dataset for this assessment using the following link: https://www.kaggle.com/datasets/arianazmoudeh/airbnbopendata

This dataset contains information such as the neighborhood offering these services, room type, price,avaliabilty, reviews, service fee, cancellation policy and rules to use the house. This analysis will help airbnb in improving its services.  

So all the best for your Data Analytics Journey on Airbnb data!!!

## Task 1: Data Loading (Python)

1. Read the csv file and load it into a pandas dataframe.
2. Display the first five rows of your dataframe.
3. Display the data types of the columns.
"""

## Read the csv file
import pandas as pd
# Import the csv dataset
from google.colab import drive
drive.mount('/content/gdrive')
# Load your data and print out a few lines. Perform operations to inspect data
data = pd.read_csv('gdrive/My Drive/Airbnb_Open_Data.csv')

## Display the first 5 rows
data.head(5)

data.shape

## Display the data types
data.dtypes

"""## Task 2a: Data Cleaning (Any Tool)

1. Drop some of the unwanted columns. These include `host id`, `id`, `country` and `country code` from the dataset.
2. State the reason for not including these columns for your Data Analytics.

If using Python for this exercise, please include the code in the cells below. If using any other tool, please include screenshoots before and after the elimination of the columns.
"""

# This columns will not be needed in the analysis
data = data.drop(['host id', 'id', 'country', 'country code'], axis = 1)

# The data shape before the dropping of the column is (102599, 26)
data.shape



"""## Task 2b: Data Cleaning (Python)

- Check for missing values in the dataframe and display the count in ascending order. **If the values are missing, impute the values as per the datatype of the columns.**
- Check whether there are any duplicate values in the dataframe and, if present, remove them.
- Display the total number of records in the dataframe before and after removing the duplicates.
"""

import numpy as np

## Check for missing values in the dataframe and display the count in ascending order.
data.isna().sum().sort_values(ascending = True)

## Check whether there are any duplicate values in the dataframe and if present remove them.
data.duplicated().sum()

# The data shape before droping duplicate is (102599, 22)
data = data.drop_duplicates()

## Display the total number of records in the dataframe after removing the duplicates.
data.shape

"""## Task 3: Data Transformation (Any Tool)


- Rename the column `availability 365` to `days_booked`
- Convert all column names to lowercase and replace the spaces in the column names with an underscore "_".
- Remove the dollar sign and comma from the columns `price` and `service_fee`. If necessary, convert these two columns to the appropriate data type.

If using Python for this exercise, please include the code in the cells below. If using any other tool, please include screenshoots of your work.
"""

data.columns

## Rename the column availability 365 to days_booked.
data.rename(columns={'availability 365': 'days_booked'}, inplace = True)

data.columns

## Convert all column names to lowercase and replace the spaces with an underscore "_"
data.columns = data.columns.str.lower()
data.columns = data.columns.str.replace(' ', '_')
data.columns

data[['price','service_fee']]

## Drop NaN columns
data = data.dropna(subset='price')
data = data.dropna(subset = 'service_fee')

data[['price','service_fee']]

## Remove the dollar sign and comma from the columns. If necessary, convert these two columns to the appropriate data type.
data.service_fee = data.service_fee.str.replace(',', '')
data.service_fee = data.service_fee.str.replace('$', '')
data.price = data.price.str.replace(',', '')
data.price = data.price.str.replace('$', '')
data.service_fee = data.service_fee.astype(float)
data.price = data.price.astype(float)
data.head()

# To confirm the data types of Price and Service fee
data.info()

"""### Task 4: Exploratory Data Analysis (Any Tool)

- List the count of various room types avaliable in the dataset.
- Which room type has the most strict cancellation policy?
- List the average price per neighborhood group, and highlight the most expensive neighborhood to rent from.

If using Python for this exercise, please include the code in the cells below. If using any other tool, please include screenshoots of your work.
"""

data['room_type'].unique()

## List the count of various room types avaliable with Airbnb
data['room_type'].value_counts()

## Which room type adheres to more strict cancellation policy
strict_cancellation_room = data[data['cancellation_policy'] == 'strict']['room_type'].value_counts().idxmax()
strict_cancellation_room

data['neighbourhood_group'].unique()

## List the prices by neighborhood group and also mention which is the most expensive neighborhood group for rentals
most_expensive_neighborhood_group = data.groupby('neighbourhood_group').price.mean().sort_values()
most_expensive_neighborhood_group

# Most expensive neighborhood group for rentals
most_expensive_neighborhood_group.idxmax()

"""## Task 5a: Data Visualization (Any Tool)

- Create a horizontal bar chart to display the top 10 most expensive neighborhoods in the dataset.
    - Create another chart with the 10 cheapest neighborhoods in the dataset.
- Create a box and whisker chart that showcases the price distribution of all listings split by room type.

If using Python for this exercise, please include the code in the cells below. If using any other tool, please include screenshoots of your work.
"""

# Commented out IPython magic to ensure Python compatibility.
import matplotlib.pyplot as plt
import seaborn as sns

import warnings
warnings.filterwarnings('ignore')

plt.rcParams['figure.figsize'] = 8, 4

# %matplotlib inline

# Top 10 most epensive neighborhood
Most_expensive_neighborhood = data[['price', 'neighbourhood']].sort_values(by = 'price', ascending = False).head(10)
Most_expensive_neighborhood

# Horizonatl bar chart of Top 10 most epensive neighborhood
sns.barplot(Most_expensive_neighborhood, x = 'price', y = 'neighbourhood')
plt.title('Top 10 Most Expensive Neighborhood')
plt.xlabel('Price ($)')
plt.ylabel('Neighborhood')
plt.show()

# Top 10 cheapest neighborhood
Cheapest_neighborhood = data[['price', 'neighbourhood']].sort_values(by = 'price').head(10)
Cheapest_neighborhood

# Horizonatl bar chart of Top 10 cheapest neighborhood
sns.barplot(Cheapest_neighborhood, x = 'price', y = 'neighbourhood')
plt.title('Top 10 Cheapest Neighborhood')
plt.xlabel('Price ($)')
plt.ylabel('Neighborhood')
plt.show()

# Price dristribution by room type
Price_by_roomtype = data[['room_type', 'price']]
Price_by_roomtype

# Box plot chart of Price dristribution by room type
sns.boxplot(data = Price_by_roomtype, x = 'room_type', y = 'price')
plt.title('Price Distribution by Room type')
plt.ylabel('Price ($)')
plt.xlabel('Room Type')
plt.show()

"""## Task 5b: Data Visualization (Any Tool)

- Create a scatter plot to illustrate the relationshi between the cleaning fee and the room price and write down the kind of correlation, if any, that you see.
- Create a line chart to showcase the total amount of listings available per year.

If using Python for this exercise, please include the code in the cells below. If using any other tool, please include screenshoots of your work.
"""

# Relationship between Service fee and Price
sns.scatterplot(data = data, x = 'service_fee', y = 'price')
plt.title('Relationship between Service fee and Price')
plt.show()

"""

> This is a Positive Correlation

"""

data['construction_year'].unique()

data = data.dropna(subset='construction_year')
data['construction_year'].unique()

data['construction_year'] = data['construction_year'].astype(int)

Listing_by_year = data[['construction_year', 'calculated_host_listings_count']].sort_values(by = 'construction_year')
Listing_by_year

# The total amount of listings available per year
plt.rcParams['figure.figsize'] = 12, 4
sns.barplot(Listing_by_year, x = 'construction_year', y = 'calculated_host_listings_count')
plt.title('Total amount of listings available per year')
plt.xlabel('Contruction Year')
plt.ylabel('Listings')
plt.show;

"""## Task 5c: Data Visualization (Any Tool)

- Create a data visualization of your choosing using one of the review columns in isolation or in combination with another column.
- Create a visualization to compare at least two different variables between super hosts and regular hosts or use the Verified identity in the host_identity_verified.

If using Python for this exercise, please include the code in the cells below. If using any other tool, please include screenshoots of your work.
"""

# To see the reviews we have
data.info()

data['review_rate_number'].unique()

data = data.dropna(subset='review_rate_number')
data['review_rate_number'].unique()

data['review_rate_number'] = data['review_rate_number'].astype(int)

data['review_rate_number'].value_counts().plot(kind = 'bar')

